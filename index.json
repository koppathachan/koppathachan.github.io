[{"content":" \u0026lsquo;Brevity is the soul of wit\u0026rsquo;\n We owe shakespeare the credit for this enduring idiom. The context of this quote is often lost in its contemporary usage. I am going to ignore it too, and use it to simply mean \u0026lsquo;intelligence or humour is best expressed briefly\u0026rsquo;. I am also going to extend this quality, \u0026lsquo;soul of wit\u0026rsquo;, to programming.\nThe best thing about free and open source software is that there is a lot of good, clean useful software to choose from to do anything. Consider the JavaScript ecosystem. Trivial computations like calling a function multiple times or getting a value from the nested object, or delaying a function can be done by using generic implementations in \u0026rsquo;lodash\u0026rsquo; package. Even implementations of native methods like forEach, map, filter, find are found (I guess lodash was pre es3) in lodash. Coming back to brevity and the soul of wit, I could not bring myself to include another library for such trivial things. I prefer custom specific implementations to generic solution especially for such trivial things. For instance, consider the lodash method isEmpty(value). lodash.isEmpty(value) looks for all falsey values. Why must it.\n 1  const isEmpty = arr =\u0026gt; arr.length === 0 || Object.keys(arr).length === 0;  \nIn most cases its input will be an object or an array. That\u0026rsquo;s readable and brief. Why must a function that checks if an object is empty, recieve say, a number. It is a violation of the Liskov Substitution Principle aka LSP.\nAnother common use case is for Promise. Promises were introduced in es6 (ES2015). Before that other libraries like Bluebird were used. Bluebird even performed better than native Promises (before node 10). However, Bluebird also has other functions like Promise.map, which can be easily implemented using array.map and async/await. Promise.map also has options like concurrency. But I cannot see the rationale behind importing a library to use a couple of its features as opposed spending 15 minutes to implement them yourself. Here is where that soul of wit is and this habit has made me a better programmer. A generic solution is not always the best approach and in those instances I prefer a custom solution.\nNonetheless, I was interested in a generic solution for Promise.map using modern javscript. Here\u0026rsquo;s what I came up with.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // partition the data into groups of length given by concurrency.  const partition = (data, concurrency) =\u0026gt; Array.from({ length: Math.ceil(data.length / concurrency) }, (_, i) =\u0026gt; data.slice(i * concurrency, (i + 1) * concurrency)); // custom mapReduce takes a mapper function  // that should be partially applied to return the reduce method.  const mapReduce = (mapper) =\u0026gt; async ( result, data ) =\u0026gt; [...await result, ...await Promise.all(data.map(mapper))]; const map = ( concurrency = Infinity ) =\u0026gt; async ( data, mapper ) =\u0026gt; partition(data, concurrency).reduce(mapReduce(mapper), []);  \nThe above code is simple, follows functional programming paradigm using modern javascript.\nAnother irritating example is that of the lodash get method. It allows us to do this:\n 1 2 3 4  const object = { \u0026#39;a\u0026#39;: [{ \u0026#39;b\u0026#39;: { \u0026#39;c\u0026#39;: 3 } }] }; get(object, \u0026#39;a[0].b.c\u0026#39;); // 3  // and you can pass a default value if the path is not found.  get(object, \u0026#39;a.b.c\u0026#39;, \u0026#39;default\u0026#39;); // \u0026#39;default\u0026#39;   \nIn the off chance that I have to use this function, I prefer this.\n 1 2 3 4 5 6 7 8 9 10 11  const makeGet = (def) =\u0026gt; ( obj, ...ks ) =\u0026gt; ks.slice(1).reduce(( o, k, _, kss ) =\u0026gt; (typeof o === \u0026#39;object\u0026#39; \u0026amp;\u0026amp; o[k]) || (kss.splice(1) \u0026amp;\u0026amp; def), obj[ks[0]]); const get = makeGet(\u0026#39;default\u0026#39;); get(object, \u0026#39;a\u0026#39;, 0, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;); // 3  get(object, \u0026#39;a\u0026#39;, 0, \u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;); // \u0026#39;default\u0026#39;   \nIt doesn\u0026rsquo;t take much effort to parse \u0026lsquo;a[0].b.c\u0026rsquo; into the arguments of this function.\nIt is always more rewarding to take some time out and implement such trivial functions. I\u0026rsquo;ve learnt a few things from that and it has defintely made me a better programmer.\n","permalink":"https://akhilsasidharan.in/tech/prefer-native-over-library/","summary":"\u0026lsquo;Brevity is the soul of wit\u0026rsquo;\n We owe shakespeare the credit for this enduring idiom. The context of this quote is often lost in its contemporary usage. I am going to ignore it too, and use it to simply mean \u0026lsquo;intelligence or humour is best expressed briefly\u0026rsquo;. I am also going to extend this quality, \u0026lsquo;soul of wit\u0026rsquo;, to programming.\nThe best thing about free and open source software is that there is a lot of good, clean useful software to choose from to do anything.","title":"Why use native Promise over Bluebird and other implementations"},{"content":"Memoization is an optimization technique used in functional programming to speed up execution by storing the results of resource expensive function calls. When the function is called again with the same input the stored result is fetched and returned. This is possible in functional programming languages because of the use of pure functions as discussed in this post. Purely functional languages such as Haskell has inbuilt support for memoization. In javascript, using a mutable map (object, map, caches) we can implement a memoization.\nMemoization is especially useful in recursive functions. Writing code the functional way makes my code expressive and testable. However, as I will demonstrate now, in javascript (and most other impure functional languages) recursion is horrendously slow. Recursion is essential to functional programming.\nLet\u0026rsquo;s look at the fibonacci series. The mathematical formula of which is,\nFn = Fn-1 + Fn-2, where F0 = 0, F1 = 1\nor\nFn = Fn-1 + Fn-2, when n \u0026gt; 1, and\nFn = n, when n \u0026lt;= 1\nLooking at this equation one can see why recursive function appeals here. Look at the analogous js code.\n\nconst fib = (n) =\u0026gt; n \u0026gt; 1 ? fib(n - 1) + fib(n - 2) : n; To calculate the fibonacci of 40 the above function took more than a second. Beyond fibonacci of 50 the output depends on what video I am playing on my laptop. The non recursive but super fast code looks like this.\n 1 2 3 4 5 6 7 8 9 10  const uglyFib = (n) =\u0026gt; { let a = 0, b = 1, c, i; if (n == 0) return a; for (i = 2; i \u0026lt;= n; i++) { c = a + b; // We violate immutability rule here  a = b; // and here  b = c; // and here  } return b; };  \nIt doesn\u0026rsquo;t look anything like its mathematical representation. I wished it had the charming good looks of its recursive counterpart to go with its dashing performance. That wish was granted; we have memoization.\nBut first let me show you what happens while calculating the fibonacci value of 5. fib(5).\n\nfib(5) | +--fib(4) | | | +--fib(3)-------------------------------1 | | | | | | +--fib(2)-----------------1 | | | | | | | | | | *--fib(1) | | | | | | | | | | | *--fib(0) | | | | | | | | | +--fib(1) | | | | | | | +--fib(2)--------------------2 | | | | | | *--fib(1) | | | | | | | *--fib(0) | | +--fib(3)-----------------------|----------2 | | | | +--fib(2)--------------------3 | | | | | *--fib(1) | | | | | *--fib(1) | | | +--fib(1) From the above tree we can see that fib(3) is called 2 times, fib(2) is called 3 times, fib(1) 6 times and fib(0) 2 times. Memoization is how we avoid these repeated calls by saving the result the first time fib(n) is called. When the result is returned its value is cached in an object with the key as the functions input (n in this case). This can be reused by subsequent calls to the function with the same input.\nLet\u0026rsquo;s look at a basic implementation of memoization.\n 1 2 3 4 5 6 7 8  const fibonacci = (n, memo = {}) { // provide a default object as \t// cache.  if (memo[n]) { return memo[n]; } // looking in the cache.  if (n \u0026lt;= 1) { return 1; } memo[n] = fibonacci(n - 1, memo) + // save the result and pass the \tfibonacci(n - 2, memo); // cache object.  return memo[n]; // return the result  }  \nThe above implementation not only caches the result of fibonacci(5), but also intermediate results of fibonacci(4), fibonacci(3) and all the rest of them.\nSome npm modules like fast-memoize and memoize provide generic implementations to memoize any function like this.\n 1 2 3 4 5  const memoize = require(\u0026#39;fast-memoize\u0026#39;) const fn = function (one, two, three) { /* ... */ } const memoized = memoize(fn) memoized(\u0026#39;foo\u0026#39;, 3, \u0026#39;bar\u0026#39;) memoized(\u0026#39;foo\u0026#39;, 3, \u0026#39;bar\u0026#39;) // Cache hit   \nBut they do not cache intermediate results like we saw above in the custom implementation. While I do like custom implementations over a generic solution, I attempted a generic solution that caches intermediate values. That is, if I call fib(5) the memoized value of fib(5) will cache fib(4), fib(3), fib(2), fib(1), fib(0) before the function fib(5) has returned, which is speeds up some recursive functions.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  export const memoize = (func, cache = Object.create(null)) =\u0026gt; { // here we do some magic to sanitize body and arguments recieved from  // the func.toString() call. Then we return a new function as shown  // below.  return new Function(\u0026#39;cache\u0026#39;, ` return function ${func.name}(${args}) { let result = cache[JSON.stringify([${args}])] if (result) { return result; } result = ${body}cache[JSON.stringify([${args}])] = result; return result; } `)(cache); };  \nNot an elegant solution admittedly, but it does the job, given the limitations of javascript. You can explore the full code at https://github.com/sasidakh/memoizer.\nI tested this implementation where the fibonacci of 40 was calculated and it was only 4 times slower (the first time it was called) than its non recursive counter part as opposed to being nearly 40000 times slower.\n   Without recursion : : x     With recursion : : ~ 39000x slower   Memoized recursion : : ~4x slower   Memoized recursion ran twice : : ~42x faster    Wo-hoo! My code is faster thanks to memoization\nYou can run the tests on the repo to understand it better.\n","permalink":"https://akhilsasidharan.in/tech/fast-recursion-using-memoizer/","summary":"Memoization is an optimization technique used in functional programming to speed up execution by storing the results of resource expensive function calls. When the function is called again with the same input the stored result is fetched and returned. This is possible in functional programming languages because of the use of pure functions as discussed in this post. Purely functional languages such as Haskell has inbuilt support for memoization. In javascript, using a mutable map (object, map, caches) we can implement a memoization.","title":"Memoization, with a js implementation that caches recursive calls"},{"content":"I’ve been going through some functional programming concepts because I’m on a quest to write better code, and someone told me functional programming is the way to go. I was intrigued and so, I read about it and found out that it was based on lambda calculus and was even more intrigued because it said “calculus”.\nThe mathematical definition of a function is \u0026lsquo;a relationship between two sets of values such that every element in the first set has a unique value in the second set\u0026rsquo;.\nExamples:\n f(x) = x^2 + 1 f(x) = cos(x) f(x) = mother of x f(x) = xx f(x) ={ |x| | x ∈ N }, where N is the set of natural numbers.  The values of x makes the first set and the evaluated values makes the second set.\nThese functions are called pure functions in computer science. A pure function is a function where the return value is determined by only its input values without any observable side effects. If you look at the second example above cos(x), will always return the same value for a given x. For example.\n 1 2  const add = (a, b) =\u0026gt; a+b; add(3, 4) // = 7   \nSame function with a side effect.\n 1 2 3 4 5  const add = (a, b) =\u0026gt; { console.log(`adding ${a}and ${b}.`); // this is a side effect.  return a+b; } add(3, 4) // = 7   \nPure functions are very useful in a special kind of optimisation called memoization. Since for a given value x the value of f(x) will always remain the same it can be saved for future evaluations and can speed up expensive function evaluations.\nIn maths a variable x once assigned a value does not change. That is to say that when a variable x = 1, it cannot be reassigned to x = 3 or we cannot mutate x to be ++x. Such an expression would be absurd to a mathematician. We follow the same rule in functional programming and it is called immutability.\n 1 2 3 4 5 6 7  const options = { param1: 100 }; const addParam2 = opts =\u0026gt; { opts.param2 = 200; return opts; } console.log(addParam2(options)) // { param1: 100, param2: 200 }  console.log(options) // { param1: 100, param2: 200 }   \nIn the above snippet addParam2 function changes the options variable so any code that uses the options variable after will produce incosistent values. Using variables this way will also force us to keep track of all the changes to variables, which is a terrible debugging nightmare.\nInstead do this:\n 1 2 3 4  const options = { param1: 100 }; const addParam2 = opts =\u0026gt; ({ param2: 200, ...opts }); console.log(addParam2(options)) // { param1: 100, param2: 200 }  console.log(options) // { param1: 100 }   \nImmutability is important because in an expression such as the following;\n 1 2 3  const sq = x =\u0026gt; x ** 2; const equation = x =\u0026gt; 3 * sq(x) + 5 * x + 6 // ax^2 + bx + c  equation(5); // = 106   \nIf we replace equation(5) with its value 106 it does not change the behaviour of the program in anyway. Such expressions are said to be referentially transparent.\nIn functional programming paradigm functions are first-class which means they are treated like any other variable. They can be passed to a function or returned from a function. Such functions are called Higher-Order functions.\n 1 2 3  const makeAdjectifier = adjective =\u0026gt; noun =\u0026gt; `${adjective}${noun}`; const coolifier = makeAdjectifier(\u0026#39;cool\u0026#39;); console.log(coolifier(\u0026#39;cat\u0026#39;)); //cool cat   \nConsider this program to find the sum of a list of numbers.\n 1 2 3 4 5  const arr = [ 100, 20, 40, 60, 10, 70 ]; var sum = 0; for (let i = 0; i \u0026lt; arr.length; i++) { sum += arr[i]; // we violate the immutability rule here.  }  \nAs you can see we are adding to the variable sum at every iteration and mutating the value. Consider this solution using the inbuilt reduce function.\n 1 2 3  const arr = [ 100, 20, 40, 60, 10, 70 ]; const sum = arr.reduce((sum, cur) =\u0026gt; sum + curr, 0); //higher-order \t//reduce function   \nHigher-order functions are essential to writing correct functional code.\nI hope this helps in writing better code.\n","permalink":"https://akhilsasidharan.in/tech/functional-programming/","summary":"I’ve been going through some functional programming concepts because I’m on a quest to write better code, and someone told me functional programming is the way to go. I was intrigued and so, I read about it and found out that it was based on lambda calculus and was even more intrigued because it said “calculus”.\nThe mathematical definition of a function is \u0026lsquo;a relationship between two sets of values such that every element in the first set has a unique value in the second set\u0026rsquo;.","title":"Functional Programming"},{"content":"Currying is the transformation of a function written like this\n 1 2  const add = (a, b) =\u0026gt; a+b; add(3, 4) // = 7   \nInto this\n 1 2  const add = a =\u0026gt; b =\u0026gt; a+b; add(3)(4) // = 7   \nWhich allows me to do this.\n 1 2 3  const add = a =\u0026gt; b =\u0026gt; a+b; const add3 = add(3); // this can be read as 3 + b;  add3(1) // = 4   \nHere I partially applied 3 to the function add to get add3 a specific function that adds 3 to its input.\nYou can compose functions like these.\n 1 2 3 4 5  const longerThan = n =\u0026gt; word =\u0026gt; word.length \u0026gt; n; const words = [\u0026#39;something\u0026#39;, \u0026#39;schadenfreude\u0026#39;, \u0026#39;ambivalent\u0026#39;, \u0026#39;good\u0026#39;, \u0026#39;bad\u0026#39;, \u0026#39;preposterous\u0026#39;]; const find = words =\u0026gt; lengthCond =\u0026gt; words.filter(lengthCond); find(words)(longerThan(7));  \nNow that just reads \u0026lsquo;find words longer than seven\u0026rsquo;.\n 1 2 3 4 5 6 7  const greet = message =\u0026gt; name =\u0026gt; `${message}${name}!`; const sayHelloTo = greet(\u0026#39;Hello\u0026#39;); sayHelloTo(\u0026#39;Akhil\u0026#39;); // Hello Akhil!  const sayWelcomeTo = greet(\u0026#39;Welcome\u0026#39;); sayWelcomeTo(\u0026#39;Mamta\u0026#39;); // Welcome Mamta!  const sayGoodDayTo = greet(\u0026#39;Good Day\u0026#39;); sayGoodDayTo(\u0026#39;Ritika\u0026#39;); // Good Day Ritika!   \nIt\u0026rsquo;s easy on the eyes isn\u0026rsquo;t it.\nI especially like this:\n 1 2 3 4 5 6 7 8 9  const double = x =\u0026gt; x * 2; const triple = x =\u0026gt; x * 3; // This is a bit tricky to read admittedly, but look what it produces  const pipe = (...fns) =\u0026gt; n =\u0026gt; fns.reduce((total, f) =\u0026gt; f(total), n); const doubler = pipe(double); // same as double  const quadrupler = pipe(double, double); const sextuple = pipe(double, triple); quadrupler(3); // 12  sextuple(5); // 30   \nThis is called composition.\nHere\u0026rsquo;s another fun one.\n 1 2 3 4  const subString = start =\u0026gt; len =\u0026gt; str =\u0026gt; str.substr(start, len); const lowerCase = str =\u0026gt; str.toLowerCase(); const firstCharacter = str =\u0026gt; substring(0)(1)(str); const firstCharacterAsLower = str =\u0026gt; lowerCase(firstCharacter(str));  \nIn conclusion, currying if used properly makes code really readable and can produce powerful abstractions through compositions and partial application of functions. I will explore partial application examples in my next post.\n","permalink":"https://akhilsasidharan.in/tech/why-curry/","summary":"Currying is the transformation of a function written like this\n 1 2  const add = (a, b) =\u0026gt; a+b; add(3, 4) // = 7   \nInto this\n 1 2  const add = a =\u0026gt; b =\u0026gt; a+b; add(3)(4) // = 7   \nWhich allows me to do this.\n 1 2 3  const add = a =\u0026gt; b =\u0026gt; a+b; const add3 = add(3); // this can be read as 3 + b;  add3(1) // = 4","title":"Why currying?"},{"content":"November 10th, 2019 marked the 10th anniversary of this awesome programming language called Go. The Go community in Bangalore organized a meetup (which was also their 50th meetup) hosted by SAP Labs. The meetup introduced me to gRPC and writing custom plugins for gRPC. The meetup also introduced me to how the Go runtime scheduler works and how it has achieved high performance concurrency. I was just a beginner in Go and starting to fall in love with the language, and knowing the genesis story of Go helped me understand some of the weirdness I felt about the language initially. After starting with some basic programming in Go (creating a basic http server and some middleware), the language grew on me and quickly became my favourite programming language. The designers of Go set out to create a fast, productive, and fun programming language, and that\u0026rsquo;s exactly what they did. Let\u0026rsquo;s take a brief tour through some of my learning and experiences. I have taken less time to learn Go than any other programming language. It has ~25 keywords, but it can do so much. It is garbage collected, compiled, statically typed, and has a small build time. It compiles to machine code, so it performs like C. Many languages avoid enforcing semicolons at the end of a statement. Go, following in the path of C, does enforce semicolons to terminate statements but doesn\u0026rsquo;t bother developers with it. They insert one when Go code is compiled and they have defined rules for it. You can add it yourself too, but idiomatic Go avoids it. One consequence of this decision is that braces for control structures (if, for, switch, and select) should be on the same line and not on a new line, which adds to the readability of Go. Programmers do not have to make rules instructing how and where braces are used. I remember learning to code (in C++), and missing to add break statements in my switch cases and thinking, \u0026ldquo;that\u0026rsquo;s not intuitive\u0026rdquo;. I think, as a beginner to coding, those were the most irritating logical errors I have had to debug. The fall through behavior that is common in all programming languages (except python, which does not have a switch case) is useful sometimes. However, since it is not intuitive, I guess every programmer would have made the mistake of missing that break statement. Go switch cases do not fall through unless you want to (using the \u0026ldquo;fallthrough\u0026rdquo; keyword) and I like that.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  package main import ( \u0026#34;fmt\u0026#34; ) func main() { fmt.Print(\u0026#34;Go runs on \u0026#34;) switch 2 { case 1: fmt.Println(\u0026#34;1\u0026#34;) fallthrough case 2: fmt.Println(\u0026#34;2\u0026#34;) fallthrough case 3: fmt.Println(\u0026#34;3\u0026#34;) } }  \nGo also renames the while loop. Like the Go tour specifies \u0026ldquo;C\u0026rsquo;s while is spelled for in Go.\u0026rdquo; One less keyword to remember. Go\u0026rsquo;s concurrency model involves using Goroutines. Goroutines can be thought of as lightweight threads. They take very little stack space and the stack can grow and shrink according to program requirements. A program may just have one OS thread but a thousand Goroutines. Moreover, if one of the Goroutines is blocking, then the Go runtime moves all the other Goroutines into a newly spawned OS thread. All of this is done automatically by the Go runtime. Goroutines communicate using channels, which are special data structures. Channels can be buffered and Goroutines can push and pull data from it.\n 1 2 3 4 5 6 7 8 9 10 11 12 13  package main import \u0026#34;fmt\u0026#34; func main() { messages := make(chan string) go func() { messages \u0026lt;- \u0026#34;ping\u0026#34; }() msg := \u0026lt;-messages fmt.Println(msg) }  \nGo is not intuitively Object Oriented. One of the main reasons for this is because it does not support inheritance. This is not by accident, but an intentional design choice. Go considers inheritance of the classical style fragile. Instead, it uses Composition. In my opinion, Go is responsibly Object Oriented. I have often noticed that, programmers write code, using languages like Java and C# where there is only one way (OO way), but still don\u0026rsquo;t achieve OO programs. With Go, you can have methods on any type, not just structures. Go interfaces are just a set of methods and you can compose an interface with multiple types that satisfy these interfaces and any other type that satisfies the whole interface.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  package main import ( \u0026#34;fmt\u0026#34; ) type author struct { firstName string lastName string bio string } //a method on the struct author func (a author) fullName() string { return fmt.Sprintf(\u0026#34;%s %s\u0026#34;, a.firstName, a.lastName) } //author is embedded in struct post type post struct { title string content string author } //details is attached on post func (p post) details() { fmt.Println(\u0026#34;Title: \u0026#34;, p.title) fmt.Println(\u0026#34;Content: \u0026#34;, p.content) //can be accessed directly  fmt.Println(\u0026#34;Author: \u0026#34;, p.fullName()) //can be accessed with the struct name also.  fmt.Println(\u0026#34;Bio: \u0026#34;, p.author.bio) }  \nGo supports encapsulation at the package level. Exported methods in Go start with a capital letter, and that is one of the things that makes Go so readable. This is perhaps what I like most about Go syntax. Like other languages, we are not burdened with the decision of choosing between camel cases or pascal cases. Go makes it for us.\n 1 2 3 4 5 6 7 8 9 10 11 12 13  package math //add function is public. //access it outside the package like so: // math.Add(4,5) func Add(a int, b int) int { return a + b; } //not accessible outside the package math. func addPrint(a int, b int) { fmt.Println(Add(a,b)) }  \nAt work we decided, after much deliberation and debate, to use Go for one of our data processing microservices (Go concurrency model and performance benchmarks won the debate). We were designing a live data collection agent(for Managed Print Services) which consumed a huge amount of JSON data(about printers and their print count, cost etc.) from multiple paged REST APIs, categorised them based on various parameters, stored them and presented it. When we did some googling comparing Apache Spark and a custom solution in Go, we found that even though development effort for spark was lesser, the Go solution would perform better, was simpler and more efficient. The first thing that struck me was that Go is just a programming language(spark is a framework) and it was still easy to build data processing pipelines with just language constructs. I have come to describe OO Go as \u0026ldquo;Responsible Object Oriented Programming\u0026rdquo;, because it has truly bettered the way I write OO code. When it comes to concurrency, the amazing Goroutines has made me responsible as well as fearless in my coding. I would make Go my top choice just for its general purposiveness, small learning curve, and its refreshing take on object oriented programming.\n","permalink":"https://akhilsasidharan.in/tech/learning-golang/","summary":"November 10th, 2019 marked the 10th anniversary of this awesome programming language called Go. The Go community in Bangalore organized a meetup (which was also their 50th meetup) hosted by SAP Labs. The meetup introduced me to gRPC and writing custom plugins for gRPC. The meetup also introduced me to how the Go runtime scheduler works and how it has achieved high performance concurrency. I was just a beginner in Go and starting to fall in love with the language, and knowing the genesis story of Go helped me understand some of the weirdness I felt about the language initially.","title":"Go. Weird And Awesome"},{"content":"In a land of misplaced evils\nThere dwelt a creature named Spitfire,\nWho was aptly named,\nDid spit fire for\nAll the world to see.\nNews of this flame\nHad reached across the lands.\nThe flame was hot in some lands\nWhile familiar in others.\nIt did melt the ice in some\nBrought new life to ground.\nWhile in others still,\nIt'd burnt weeds in the field.\nThis land haply, fierce weeds had bounded\nAnd kept them safe.\nSo thought the insular aborigines.\nBut Spitfire flew above and saw\nThem in their misery,\nFor had they rivers flowing,\nBeyond the bound of weeds\nWhose waters be used to tend\nAnd fish be caught to eat.\nFor had they maples and oaks\nBeyond the denizens tranquil,\nWhose wood be used to shelter\nAnd shade be used to rest.\nThe creatures all not happy,\nBut Spitfire wasn't unwary\nAnd flew higher than ever.\nStill this wasn't quite,\nFor this new boundless land,\nHad new designs been drawn,\nAnd fashioned an oaken bow.\nThey shot good Spitfire down,\nWith a bow mounted on an oak.\nThey caught and tied him up\nAnd accused him\nOf exposing this land\nTo the tyranny of the unknown,\nOf exposing indigenes\nTo worlds beyond the weeds.\nBut Spitfire did fight back,\nDid so knowingly in vain.\nThis enraged the creatures\nWho set about as tyrants.\nThey skinned strong Spitfire\nAnd made fireproof armours.\nThey drank his blood and ate his flesh,\nFenced their land with his bones.\nAnd set out in search,\nFor more of his kind.\nSome for his blood, some for his flesh\nAnd some for his fireproof skin.\nBut some set out in search\nOf his fire and its fuel.\nOthers who stayed - some lit\nTheir homes with his flames,\nSome the streets, on the misplaced evils.\nSo he did not die in vain,\nAnd someday of the legend of\nSpitfire, the world will know\nAnd thus Spitfire The Great he will be dubbed,\nWho martyred for creatures unknown.\n","permalink":"https://akhilsasidharan.in/poems/spitfire/","summary":"In a land of misplaced evils\nThere dwelt a creature named Spitfire,\nWho was aptly named,\nDid spit fire for\nAll the world to see.\nNews of this flame\nHad reached across the lands.\nThe flame was hot in some lands\nWhile familiar in others.\nIt did melt the ice in some\nBrought new life to ground.\nWhile in others still,\nIt'd burnt weeds in the field.\nThis land haply, fierce weeds had bounded","title":"Spitfire"}]