<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tdd on Akhil Sasidharan</title>
    <link>https://akhilsasidharan.in/tags/tdd/</link>
    <description>Recent content in tdd on Akhil Sasidharan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Mar 2021 21:44:50 +0530</lastBuildDate><atom:link href="https://akhilsasidharan.in/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using interfaces in golang to write testable code</title>
      <link>https://akhilsasidharan.in/tech/golang/interfaces/</link>
      <pubDate>Sun, 21 Mar 2021 21:44:50 +0530</pubDate>
      
      <guid>https://akhilsasidharan.in/tech/golang/interfaces/</guid>
      <description>I like golang&amp;rsquo;s interfaces. They&amp;rsquo;re just a bunch of function signatures. Simple. Any user-defined type can satisfy multiple interface types at once. Which is why I could easily read a file and pass that to my function that takes an io.Reader interface. *os.File implements the Read(b []byte) (int, error).
I am a strong advocate of Test Driven Development or TDD. What I have experienced is that the &amp;lsquo;Eyes closed, head first, can&amp;rsquo;t lose&amp;rsquo; approach to writing code first and then thinking about testing it doesn&amp;rsquo;t work.</description>
    </item>
    
  </channel>
</rss>
